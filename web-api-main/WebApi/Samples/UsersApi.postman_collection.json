{
	"info": {
		"_postman_id": "b6597a18-6f54-4668-87e9-f1c81e2ef3b8",
		"name": "UsersApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. GetUserById",
			"item": [
				{
					"name": "200 when all is fine",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content is correct\", function () {",
									"    var expected = {",
									"        \"id\": \"77777777-7777-7777-7777-777777777777\",",
									"        \"login\": \"Admin\",",
									"        \"fullName\": \"Halliday James\",",
									"        \"gamesPlayed\": 999,",
									"        \"currentGameId\": null",
									"    };",
									"    pm.expect(pm.response.json()).to.eql(expected);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-7777-7777-7777-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "404 when userId is unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-6666-6666-6666-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when userId is trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "trash",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "200 when accept xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/xml\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/xml; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content is correct\", function () {",
									"    var responseJson = xml2Json(responseBody);",
									"    pm.expect(responseJson.UserDto.Id).to.eql(\"77777777-7777-7777-7777-777777777777\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-7777-7777-7777-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "406 when accept text/plain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-7777-7777-7777-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "2. CreateUser",
			"item": [
				{
					"name": "201 when all is fine",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"console.log(pm.response);",
									"var userId = \"\";",
									"try { userId = pm.response.json() } catch (e) {}",
									"",
									"// NOTE: Проверка, что идентификатор созданного пользователя возвращается в теле ответа",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var contentUrl = baseUrl + \"/api/users/\" + userId;",
									"pm.sendRequest(contentUrl, function (err, response) {",
									"    pm.test(\"Content is userId of created user\", function () {",
									"        checkUser(err, response);",
									"    });",
									"});",
									"",
									"// NOTE: Проверка, что ссылка на созданного пользователя возвращается в заголовке Location",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var locationUrl = postman.getResponseHeader(\"Location\");",
									"if (!locationUrl) {",
									"    pm.test(\"Location is URI to created user\", function () {",
									"        pm.response.to.have.header(\"Location\");",
									"    });",
									"} else {",
									"    pm.sendRequest(locationUrl, function (err, response) {",
									"        pm.test(\"Location is URI to created user\", function () {",
									"            checkUser(err, response);",
									"        });",
									"    });",
									"}",
									"",
									"function checkUser(err, response) {",
									"    pm.expect(err).to.not.be.ok;",
									"        ",
									"    var expected = {",
									"        \"id\": userId,",
									"        \"login\": \"mjackson\",",
									"        \"fullName\": \"Jackson Michael\",",
									"        \"gamesPlayed\": 0,",
									"        \"currentGameId\": null",
									"    };",
									"    pm.expect(response.json()).to.eql(expected);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"mjackson\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "400 when empty content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when login with unallowed chars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"!jackson!\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "201 with default firstName and lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userId = \"\";",
									"try { userId = pm.response.json() } catch (e) {}",
									"",
									"// NOTE: Проверка, что идентификатор созданного пользователя возвращается в теле ответа",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var contentUrl = baseUrl + \"/api/users/\" + userId;",
									"pm.sendRequest(contentUrl, function (err, response) {",
									"    pm.test(\"Content is userId of created user\", function () {",
									"        checkUser(err, response);",
									"    });",
									"});",
									"",
									"// NOTE: Проверка, что ссылка на созданного пользователя возвращается в заголовке Location",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var locationUrl = postman.getResponseHeader(\"Location\");",
									"if (!locationUrl) {",
									"    pm.test(\"Location is URI to created user\", function () {",
									"        pm.response.to.have.header(\"Location\");",
									"    });",
									"} else {",
									"    pm.sendRequest(locationUrl, function (err, response) {",
									"        pm.test(\"Location is URI to created user\", function () {",
									"            checkUser(err, response);",
									"        });",
									"    });",
									"}",
									"",
									"function checkUser(err, response) {",
									"    pm.expect(err).to.not.be.ok;",
									"        ",
									"    var expected = {",
									"        \"id\": userId,",
									"        \"login\": \"anonymous\",",
									"        \"fullName\": \"Doe John\",",
									"        \"gamesPlayed\": 0,",
									"        \"currentGameId\": null",
									"    };",
									"    var responseJson = response.json();",
									"    pm.expect(responseJson).to.eql(expected);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"anonymous\",\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "201 when accept xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/xml\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/xml; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content is correct\", function () {",
									"    pm.expect(xml2Json(responseBody).guid).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"mjackson\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "406 when accept text/plain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"mjackson\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "24e15ff0-99f4-4780-8a6f-c2b184637369",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91ba431b-8cab-4037-b642-8e87c0d0277a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "3. UpdateUser",
			"item": [
				{
					"name": "204 when all is fine",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									"",
									"// NOTE: Выполняется GET запрос, чтобы проверить корректность обновления",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"pm.sendRequest(baseUrl + \"/api/users/\" + createdUserId, function (err, response) {",
									"    pm.test(\"User was correctly updated\", function () {",
									"        pm.expect(err).to.not.be.ok;",
									"        ",
									"        var expected = {",
									"            \"id\": createdUserId,",
									"            \"login\": \"Anon\",",
									"            \"fullName\": \"V Vendetta\",",
									"            \"gamesPlayed\": 0,",
									"            \"currentGameId\": null",
									"        };",
									"        pm.expect(response.json()).to.eql(expected);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"Anon\",\n    \"firstName\": \"Vendetta\",\n    \"lastName\": \"V\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "201 when no user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.variables.set(\"updatingUserId\", uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script генерируется идентификатор для обновляемого пользователя",
									"var updatingUserId = pm.variables.get(\"updatingUserId\");",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userId = \"\";",
									"try { userId = pm.response.json() } catch (e) {}",
									"",
									"pm.test(\"UserId of created user is equal to userId sent in PUT request\", function () {",
									"    pm.expect(userId).to.eql(updatingUserId);",
									"});",
									"",
									"// NOTE: Проверка, что идентификатор созданного пользователя возвращается в теле ответа",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var contentUrl = baseUrl + \"/api/users/\" + userId;",
									"pm.sendRequest(contentUrl, function (err, response) {",
									"    pm.test(\"Content is userId of created user\", function () {",
									"        checkUser(err, response);",
									"    });",
									"});",
									"",
									"// NOTE: Проверка, что ссылка на созданного пользователя возвращается в заголовке Location",
									"// NOTE: Результат выполнения всех запросов к API можно посмотреть в Postman Console: Ctrl+Alt+C",
									"var locationUrl = postman.getResponseHeader(\"Location\");",
									"if (!locationUrl) {",
									"    pm.test(\"Location is URI to created user\", function () {",
									"        pm.response.to.have.header(\"Location\");",
									"    });",
									"} else {",
									"    pm.sendRequest(locationUrl, function (err, response) {",
									"        pm.test(\"Location is URI to created user\", function () {",
									"            checkUser(err, response);",
									"        });",
									"    });",
									"}",
									"",
									"function checkUser(err, response) {",
									"    pm.expect(err).to.not.be.ok;",
									"        ",
									"    var expected = {",
									"        \"id\": userId,",
									"        \"login\": \"mjackson\",",
									"        \"fullName\": \"Jackson Michael\",",
									"        \"gamesPlayed\": 0,",
									"        \"currentGameId\": null",
									"    };",
									"    pm.expect(response.json()).to.eql(expected);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"mjackson\",\n    \"firstName\": \"Michael\",\n    \"lastName\": \"Jackson\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{updatingUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "400 when userId is trash",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"Anon\",\n    \"firstName\": \"Vendetta\",\n    \"lastName\": \"V\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "trash",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "400 when empty content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{$guid}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Vendetta\",\n    \"lastName\": \"V\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when login with unallowed chars",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"!Anon!\",\n    \"firstName\": \"Vendetta\",\n    \"lastName\": \"V\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty firstName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains firstName error\", function () {",
									"    pm.expect(pm.response.json().firstName).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"Anon\",\n    \"lastName\": \"V\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty lastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains lastName error\", function () {",
									"    pm.expect(pm.response.json().lastName).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"Anon\",\n    \"firstName\": \"Vendetta\",\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3c682c1d-fdc5-452b-bd07-88f1371462a1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9a817c14-c26a-43d0-bed8-cef30ad562ee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "4. PartiallyUpdateUser",
			"item": [
				{
					"name": "204 when all is fine",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.sendRequest(baseUrl + \"/api/users/\" + createdUserId, function (err, response) {",
									"    pm.test(\"User was correctly updated\", function () {",
									"        pm.expect(err).to.not.be.ok;",
									"        ",
									"        var expected = {",
									"            \"id\": createdUserId,",
									"            \"login\": \"Anon\",",
									"            \"fullName\": \"V Vendetta\",",
									"            \"gamesPlayed\": 0,",
									"            \"currentGameId\": null",
									"        };",
									"        pm.expect(response.json()).to.eql(expected);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"login\",\n        \"value\": \"Anon\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"firstName\",\n        \"value\": \"Vendetta\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"lastName\",\n        \"value\": \"V\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when no user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"login\",\n        \"value\": \"Anon\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"firstName\",\n        \"value\": \"Vendetta\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"lastName\",\n        \"value\": \"V\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{$guid}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when userId is trash",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"login\",\n        \"value\": \"Anon\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"firstName\",\n        \"value\": \"Vendetta\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"lastName\",\n        \"value\": \"V\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "trash",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "400 when empty content",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{$guid}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"login\",\n        \"value\": \"\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when login with unallowed chars",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains login error\", function () {",
									"    pm.expect(pm.response.json().login).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"login\",\n        \"value\": \"!Anon!\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty firstName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains firstName error\", function () {",
									"    pm.expect(pm.response.json().firstName).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"firstName\",\n        \"value\": \"\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "422 when empty lastName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0cf6b376-f508-440d-860a-2284c7d7f7b0",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"anonymous\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddb4313b-177e-4b00-ae01-59c478bb17ef",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"",
									"pm.test(\"User to update was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Content contains lastName error\", function () {",
									"    pm.expect(pm.response.json().lastName).to.be.ok;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json-patch+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"op\": \"replace\",\n        \"path\": \"lastName\",\n        \"value\": \"\"\n    }\n]"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь обновлен",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"login\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			]
		},
		{
			"name": "5. DeleteUser",
			"item": [
				{
					"name": "204 when all is fine",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4612be87-29e9-48ac-bdaf-c18c193e0d2e",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"condenado\",",
									"    \"firstName\": \"a muerte\",",
									"    \"lastName\": \"Condenado\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba38b4aa-0fdb-4f92-8770-32a8d2c8ef33",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"",
									"pm.test(\"User to delete was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь удален",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when userId is unknown",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4612be87-29e9-48ac-bdaf-c18c193e0d2e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba38b4aa-0fdb-4f92-8770-32a8d2c8ef33",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-6666-6666-6666-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь удален",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when userId is trash",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4612be87-29e9-48ac-bdaf-c18c193e0d2e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba38b4aa-0fdb-4f92-8770-32a8d2c8ef33",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "trash",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь удален",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when already created and deleted",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4612be87-29e9-48ac-bdaf-c18c193e0d2e",
								"exec": [
									"var baseUrl = pm.variables.get(\"baseUrl\");",
									"var userToCreateDto = {",
									"    \"login\": \"condenado\",",
									"    \"firstName\": \"a muerte\",",
									"    \"lastName\": \"Condenado\"",
									"};",
									"",
									"pm.sendRequest({",
									"    url: baseUrl + \"/api/users/\",",
									"    method: 'POST',",
									"    header: 'Content-type: application/json',",
									"    body: {",
									"      mode: 'raw',",
									"      raw: JSON.stringify(userToCreateDto)",
									"    }",
									"}, function (err, response) {",
									"    var createdUserId = \"\";",
									"    try { createdUserId = response.json() } catch (e) {}",
									"    pm.variables.set(\"createdUserId\", createdUserId);",
									"    console.log(\"createdUserId=\" + createdUserId);",
									"    ",
									"    if (!err) {",
									"        deleteUser(createdUserId);",
									"    }",
									"});",
									"",
									"function deleteUser(userId) {",
									"    pm.sendRequest({",
									"        url: baseUrl + \"/api/users/\" + userId,",
									"        method: 'DELETE'",
									"    }, function (err, response) {",
									"        if (!err) {",
									"            console.log(userId + \" was deleted\");",
									"            pm.variables.set(\"createdUserWasDeleted\", true);",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba38b4aa-0fdb-4f92-8770-32a8d2c8ef33",
								"exec": [
									"// NOTE: В Pre-request Script с помощью POST создается пользователь, который будет удаляться.",
									"// Важно, чтобы реализация POST в API работала корректно.",
									"var createdUserId = pm.variables.get(\"createdUserId\");",
									"var createdUserWasDeleted = pm.variables.get(\"createdUserWasDeleted\");",
									"",
									"pm.test(\"User to delete was created\", function () {",
									"    pm.expect(createdUserId).to.be.ok;",
									"});",
									"",
									"pm.test(\"User to delete was deleted\", function () {",
									"    pm.expect(createdUserWasDeleted).to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{createdUserId}}",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь удален",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"<string>"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1f114aed-3a20-4a21-b365-092adeaeb94c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4aba82f9-5494-41a1-a865-95e251c6f28f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6. HeadUserById",
			"item": [
				{
					"name": "200 when all is fine",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"/*",
									"pm.test(\"Content-Length is 0 or not present\", function () {",
									"    var contentLength = postman.getResponseHeader(\"Content-Length\");",
									"    if (contentLength) {",
									"        pm.response.to.be.header(\"Content-Length\", \"0\");",
									"    }",
									"});",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-7777-7777-7777-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "404 when userId is unknown",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "77777777-6666-6666-6666-777777777777",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "404 when userId is trash",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "HEAD",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "trash",
									"description": "Идентификатор пользователя"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "10ea9af1-7e50-4ba1-872a-9ffec38eaf80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4a9a8a5f-5597-4bbe-a147-32067d9d688c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "7. GetUsers",
			"item": [
				{
					"name": "200 when first page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    // NOTE: previousPageLink === null означает, что предыдущей страницы нет",
									"    pm.expect(pagination.previousPageLink === null).to.be.true;",
									"    // NOTE: nextPageLink !== undefined означает, поле nextPageLink есть,",
									"    // при этом оно может быть равно null или некоторой строке.",
									"    pm.expect(pagination.nextPageLink !== undefined).to.be.true;",
									"    ",
									"    pm.expect(pagination.totalCount > 0).to.be.true;",
									"    pm.expect(pagination.pageSize === 10).to.be.true;",
									"    pm.expect(pagination.currentPage === 1).to.be.true;",
									"    pm.expect(pagination.totalPages > 0).to.be.true;",
									"    ",
									"    pm.expect(pm.response.json().length).to.be.eq(Math.min(pagination.totalCount, pagination.pageSize));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "200 when second page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    // NOTE: previousPageLink !== undefined означает, поле nextPageLink есть,",
									"    // при этом оно может быть равно null или некоторой строке.",
									"    pm.expect(pagination.previousPageLink !== undefined).to.be.true;",
									"    // NOTE: nextPageLink !== undefined означает, поле nextPageLink есть,",
									"    // при этом оно может быть равно null или некоторой строке.",
									"    pm.expect(pagination.nextPageLink !== undefined).to.be.true;",
									"    ",
									"    pm.expect(pagination.totalCount > 0).to.be.true;",
									"    pm.expect(pagination.pageSize === 10).to.be.true;",
									"    pm.expect(pagination.currentPage === 2).to.be.true;",
									"    pm.expect(pagination.totalPages > 0).to.be.true;",
									"    ",
									"    pm.expect(pm.response.json().length).to.be.eq(Math.min(Math.max(pagination.totalCount - pagination.pageSize, 0), pagination.pageSize));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?pageNumber=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "200 pageNumber min is 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    pm.expect(pagination.currentPage === 1).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?pageNumber=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "200 pageSize min is 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    pm.expect(pagination.pageSize === 1).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?pageSize=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "pageSize",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "200 pageSize max is 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    pm.expect(pagination.pageSize === 20).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?pageSize=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				},
				{
					"name": "200 when pageSize=1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2155f2-7bc7-4cef-a1f9-022a0e2e333b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"X-Pagination is correct\", function () {",
									"    pm.response.to.have.header(\"X-Pagination\");",
									"    var paginationString = postman.getResponseHeader(\"X-Pagination\");",
									"    var pagination = JSON.parse(paginationString);",
									"    ",
									"    pm.expect(pagination.totalCount > 0).to.be.true;",
									"    pm.expect(pagination.pageSize === 1).to.be.true;",
									"    pm.expect(pagination.totalPages === pagination.totalCount).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/?pageSize=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								""
							],
							"query": [
								{
									"key": "pageSize",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"login\": \"<string>\",\n \"fullName\": \"<string>\",\n \"gamesPlayed\": \"<integer>\",\n \"currentGameId\": \"<string>\"\n}"
						},
						{
							"name": "Пользователь не найден",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/:userId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			]
		},
		{
			"name": "8. GetUsersOptions",
			"item": [
				{
					"name": "200 when all is fine",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5beed4dc-1b2c-4c11-858b-d4382139fc23",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No content\", function () {",
									"    pm.response.to.not.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Allow is POST,GET,OPTIONS\", function () {",
									"    pm.response.to.have.header(\"Allow\");",
									"    pm.response.to.be.header(\"Allow\", \"POST,GET,OPTIONS\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8266755d-48b9-496e-b4bf-ec42d55d5fc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "OPTIONS",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Пример запроса:\r\n            \r\n    POST /api/users\r\n    {\r\n       \"userName\": \"JohnDoe\",\r\n       \"firstName\": \"John\",\r\n       \"lastName\": \"Doe\",\r\n       \"email\": \"johndoe375@gmail.com\"\r\n    }"
					},
					"response": [
						{
							"name": "Некорректные входные данные",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Ошибка при проверке",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Пользователь создан",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"<string>\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8efba59d-e92d-4825-b775-2d9cee43556b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6254e740-f620-4195-98f4-04b303cba319",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6ad4a27a-dc20-4bae-9c15-589cadef395e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ed05b868-8c92-4195-9e38-0f7bed828968",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "64cb9a38-199d-47a2-b8b5-0e748265012e",
			"key": "baseUrl",
			"value": "http://samplehost:777",
			"type": "string"
		}
	]
}